import sys

# encoded = sys.argv[1]
encoded = "00000000000000000000000000000000000000000000000000001b48eb57e00000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000995d77ee73135fd2a8eaaca8e84be45389c2f51e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000009c4b00000000000000000000000005ceb287383bad1f38f1141e434e5be86eddf6b800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000000001c49e0000000000000000000000008670f15185700d08e8eae6d54da4570cc799417f000000000000000000000000f332761c673b59b21ff6dfa8ada44d78c12def0900000000000000000000000070cbb871e8f30fc8ce23609e9e0ea87b6b222f5800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000c40d5f0e3b0000000000000000000187958670f15185700d08e8eae6d54da4570cc799417f00000000000000000000000000000000000000000000000000001b48eb57e000000000000000000000000000000000000000000000000000000000000001c49e00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000641c00a822e8b671738d32a431a4fb6074e5c79d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000028ed6103d000000000000000000000000000bd6a5d745b7656de3f39b892c6b0a8aabb694ced000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000005ceb287383bad1f38f1141e434e5be86eddf6b800000000000000000000000000000000000000000000000000000000000000800000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000000009c4b000000000000000000000000995d77ee73135fd2a8eaaca8e84be45389c2f51e0000000000000000000000000000000000000000000000000000000000000064"
print("#####")

# Define thresholds
UPPER_THRESHOLD = 2**160
LOWER_THRESHOLD = 2**150

for i in range(len(encoded) // 64):
    start = (i << 6)
    end = start + 64
    chunk = encoded[start: end]

    start //= 2 # convert hexstring len to bytestring len

    try:
        # Convert the chunk to a uint256 value
        uint_value = int(chunk, 16)
    except ValueError:
        print(f"Invalid chunk (not hex): {chunk}")
        continue  # Skip to the next chunk

    if uint_value > UPPER_THRESHOLD:
        # More like a string, keep it as is
        print(f"0x{start:03x} Hex     - {chunk}")
    elif LOWER_THRESHOLD < uint_value <= UPPER_THRESHOLD:
        # More likely to be an address
        # Extract the last 40 hex characters (20 bytes)
        address = chunk[-40:]
        print(f"0x{start:03x} Address - 0x{address}")
    else:
        # More like a number, print in scientific notation
        if(uint_value > 1e6):
            print(f"0x{start:03x} Num     - {uint_value:.2e}")
        elif(uint_value % 32 == 0):
            print(f"0x{start:03x} Hex Num - 0x{uint_value:x}")
        else:
            print(f"0x{start:03x} Num     - {uint_value}")

